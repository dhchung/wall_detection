// Generated by gencpp from file core_msgs/wall_msg.msg
// DO NOT EDIT!


#ifndef CORE_MSGS_MESSAGE_WALL_MSG_H
#define CORE_MSGS_MESSAGE_WALL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace core_msgs
{
template <class ContainerAllocator>
struct wall_msg_
{
  typedef wall_msg_<ContainerAllocator> Type;

  wall_msg_()
    : num(0)
    , x_start()
    , y_start()
    , x_end()
    , y_end()  {
    }
  wall_msg_(const ContainerAllocator& _alloc)
    : num(0)
    , x_start(_alloc)
    , y_start(_alloc)
    , x_end(_alloc)
    , y_end(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _num_type;
  _num_type num;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_start_type;
  _x_start_type x_start;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_start_type;
  _y_start_type y_start;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_end_type;
  _x_end_type x_end;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_end_type;
  _y_end_type y_end;





  typedef boost::shared_ptr< ::core_msgs::wall_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_msgs::wall_msg_<ContainerAllocator> const> ConstPtr;

}; // struct wall_msg_

typedef ::core_msgs::wall_msg_<std::allocator<void> > wall_msg;

typedef boost::shared_ptr< ::core_msgs::wall_msg > wall_msgPtr;
typedef boost::shared_ptr< ::core_msgs::wall_msg const> wall_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_msgs::wall_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_msgs::wall_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::core_msgs::wall_msg_<ContainerAllocator1> & lhs, const ::core_msgs::wall_msg_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.x_start == rhs.x_start &&
    lhs.y_start == rhs.y_start &&
    lhs.x_end == rhs.x_end &&
    lhs.y_end == rhs.y_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::core_msgs::wall_msg_<ContainerAllocator1> & lhs, const ::core_msgs::wall_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::core_msgs::wall_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::wall_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::wall_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::wall_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::wall_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::wall_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_msgs::wall_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3c84aedfb19f93f12f91110caf199f1";
  }

  static const char* value(const ::core_msgs::wall_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3c84aedfb19f93fULL;
  static const uint64_t static_value2 = 0x12f91110caf199f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_msgs::wall_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_msgs/wall_msg";
  }

  static const char* value(const ::core_msgs::wall_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_msgs::wall_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n"
"int64 num\n"
"float32[] x_start\n"
"float32[] y_start\n"
"float32[] x_end\n"
"float32[] y_end\n"
;
  }

  static const char* value(const ::core_msgs::wall_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_msgs::wall_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.x_start);
      stream.next(m.y_start);
      stream.next(m.x_end);
      stream.next(m.y_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wall_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_msgs::wall_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_msgs::wall_msg_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num);
    s << indent << "x_start[]" << std::endl;
    for (size_t i = 0; i < v.x_start.size(); ++i)
    {
      s << indent << "  x_start[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_start[i]);
    }
    s << indent << "y_start[]" << std::endl;
    for (size_t i = 0; i < v.y_start.size(); ++i)
    {
      s << indent << "  y_start[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_start[i]);
    }
    s << indent << "x_end[]" << std::endl;
    for (size_t i = 0; i < v.x_end.size(); ++i)
    {
      s << indent << "  x_end[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_end[i]);
    }
    s << indent << "y_end[]" << std::endl;
    for (size_t i = 0; i < v.y_end.size(); ++i)
    {
      s << indent << "  y_end[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_end[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MSGS_MESSAGE_WALL_MSG_H
